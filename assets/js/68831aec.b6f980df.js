"use strict";(self.webpackChunkultrawelcome_wiki=self.webpackChunkultrawelcome_wiki||[]).push([[637],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),s=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=s(t),d=a,y=m["".concat(u,".").concat(d)]||m[d]||p[d]||i;return t?r.createElement(y,l(l({ref:n},c),{},{components:t})):r.createElement(y,l({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=m;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6607:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return u},metadata:function(){return s},toc:function(){return c},default:function(){return m}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),l=["components"],o={sidebar_position:1},u="Yaml Formatting",s={unversionedId:"extra/YamlFormatting",id:"extra/YamlFormatting",isDocsHomePage:!1,title:"Yaml Formatting",description:'For multi-line messages you can use the "\\n" character but the YAML format allows you to create very long lines in a even simplier way.',source:"@site/docs/extra/YamlFormatting.md",sourceDirName:"extra",slug:"/extra/YamlFormatting",permalink:"/docs/extra/YamlFormatting",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Admin command",permalink:"/docs/commands/admin_command"}},c=[{value:"Literal Style",id:"literal-style",children:[{value:"Keep",id:"keep",children:[]},{value:"Strip",id:"strip",children:[]}]},{value:"Folded Style",id:"folded-style",children:[]}],p={toc:c};function m(e){var n=e.components,t=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"yaml-formatting"},"Yaml Formatting"),(0,i.kt)("p",null,'For multi-line messages you can use the "\\n" character but the YAML format allows you to create very long lines in a even simplier way.'),(0,i.kt)("h2",{id:"literal-style"},"Literal Style"),(0,i.kt)("p",null,'If you want a multi-line message you can use the "|" character:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"message: |\n  \n  Line1\n  \n  Line2\n  \n  Line3\n  \n  \n")),(0,i.kt)("p",null,"This example is equal to writing: \u201c\\n\\nLine1\\n\\nLine2\\n\\nLine3\\n\u201c.",(0,i.kt)("br",{parentName:"p"}),"\n","Every line break is present except for the ending line breaks, which are reduced to one."),(0,i.kt)("h3",{id:"keep"},"Keep"),(0,i.kt)("p",null,"If you want to keep every ending line you can use \u201c|\u201c followed by \u201c+\u201c:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"message: |+\n  Line1\n  Line2\n  Line3\n  \n  \n")),(0,i.kt)("p",null,"Equal to: \u201cLine1\\nLine2\\nLine3\\n\\n\u201c."),(0,i.kt)("h3",{id:"strip"},"Strip"),(0,i.kt)("p",null,"Else if you want to remove every ending line you can use \u201c-\u201c instead of \u201c+\u201c:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"message: |-\n  Line1\n  Line2\n  Line3\n  \n")),(0,i.kt)("p",null,"Equal to: \u201cLine1\\nLine2\\nLine3\u201c."),(0,i.kt)("h2",{id:"folded-style"},"Folded Style"),(0,i.kt)("p",null,"The \u201c>\u201c sign let us write long single-line messages by splitting them on multiple lines:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"message: >\n  Line1\n  Line2\n  Line3\n")),(0,i.kt)("p",null,"Equal to: \u201cLine1 Line2 Line3\u201c"),(0,i.kt)("p",null,"Here\u2019s another example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"message: >\n  Line1\n  Line2\n  \n  \n  Line3\n  \n  \n")),(0,i.kt)("p",null,"Equal to: \u201cLine1 Line2\\n\\nLine3\\n\u201c.",(0,i.kt)("br",{parentName:"p"}),"\n","As you can see empty lines are seen as line breaks and ending line breaks are reduced to one like the literal style."),(0,i.kt)("p",null,"The \u201c-\u201c and \u201c+\u201c operators can be used and they affect the folded style in the same way as the literal style."))}m.isMDXComponent=!0}}]);